//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EFBasicTutorial2
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NorthwindEntities2 : DbContext
    {
        public NorthwindEntities2()
            : base("name=NorthwindEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Product_Category_Id> Product_Category_Id { get; set; }
    
        public virtual ObjectResult<sp_ProductDetails_Result> sp_ProductDetails(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProductDetails_Result>("sp_ProductDetails", idParameter);
        }
    
        public virtual int sp_Product_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Product_Delete", idParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sp_Product_Insert(string name, Nullable<decimal> unitPrice)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("unitPrice", unitPrice) :
                new ObjectParameter("unitPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sp_Product_Insert", nameParameter, unitPriceParameter);
        }
    
        public virtual int sp_Product_Update(Nullable<int> id, string name, Nullable<decimal> unitPrice)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("unitPrice", unitPrice) :
                new ObjectParameter("unitPrice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Product_Update", idParameter, nameParameter, unitPriceParameter);
        }
    }
}
